# ---------------------------------------------
# KADDU YT-VIEWS: Docker Compose for Tor Proxies
#
# How to use:
# 1. Make sure Docker and Docker Compose are installed and running.
# 2. Start all Tor proxies with:
#    docker-compose up -d --build
# 3. Run the script in Docker mode:
#    python main.py --use-docker
#
# To scale up (add more proxies):
# - Copy one of the torproxy sections below, change the service name and ports (e.g., torproxy4, 9053:9050, 8053:9051).
# - Save the file and re-run 'docker-compose up -d --build'.
#
# Troubleshooting:
# - If you see port conflicts, make sure each service uses unique host ports.
# - If a proxy fails to start, check Docker logs with:
#    docker-compose logs <service_name>
# ---------------------------------------------

version: '3.8'
services:
  torproxy1:
    image: dperson/torproxy
    ports:
      - "9050:9050"  # SOCKS port (host:container)
      - "8050:9051"  # Control port (host:container)
    restart: unless-stopped
    environment:
      # TOR_CONTROL_PASSWD: "your_secure_password" # Optional: set a password for the control port
      TOR_SKIP_INIT_CHECK: "true" # May be needed if startup is slow or for certain environments

  torproxy2:
    image: dperson/torproxy
    ports:
      - "9051:9050"  # SOCKS port
      - "8051:9051"  # Control port
    restart: unless-stopped
    environment:
      TOR_SKIP_INIT_CHECK: "true"

  torproxy3:
    image: dperson/torproxy
    ports:
      - "9052:9050"  # SOCKS port
      - "8052:9051"  # Control port
    restart: unless-stopped
    environment:
      TOR_SKIP_INIT_CHECK: "true"

# To scale further, you can add more services (torproxy4, torproxy5, etc.)
# with unique host port mappings.
# Example:
#  torproxy4:
#    image: dperson/torproxy
#    ports:
#      - "9053:9050"
#      - "8053:9051"
#    restart: unless-stopped
#    environment:
#      TOR_SKIP_INIT_CHECK: "true" 
